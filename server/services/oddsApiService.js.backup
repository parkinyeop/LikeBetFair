import axios from 'axios';
import OddsCache from '../models/oddsCacheModel.js';
import sportsConfig from '../config/sportsConfig.js';
import { Op } from 'sequelize';
import { normalizeTeamName, normalizeCategory, normalizeCategoryPair } from '../normalizeUtils.js';
import oddsHistoryService from './oddsHistoryService.js';
import { BETTING_CONFIG } from '../config/centralizedConfig.js';
import { ODDS_API_CONFIG, LOG_LEVELS } from '../config/oddsApiConfig.js';

// 클라이언트에서 사용하는 sport key 매핑
const clientSportKeyMap = {
  // 축구 (Soccer)
  'K리그': 'soccer_korea_kleague1',
  'J리그': 'soccer_japan_j_league',
  '세리에 A': 'soccer_italy_serie_a',
  '브라질 세리에 A': 'soccer_brazil_campeonato',
  'MLS': 'soccer_usa_mls',
  '아르헨티나 프리메라': 'soccer_argentina_primera_division',
  '중국 슈퍼리그': 'soccer_china_superleague',
  '라리가': 'soccer_spain_la_liga',
  '분데스리가': 'soccer_germany_bundesliga',
  '프리미어리그': 'soccer_epl',
  
  // 농구 (Basketball)
  'NBA': 'basketball_nba',
  
  // 야구 (Baseball)
  'MLB': 'baseball_mlb',
  'KBO': 'baseball_kbo',
  
  // 미식축구 (American Football)
  'NFL': 'americanfootball_nfl'
};

class OddsApiService {
  constructor() {
    this.apiKey = process.env.ODDS_API_KEY;
    this.baseUrl = 'https://api.the-odds-api.com/v4/sports';
    
    // API 사용량 추적 (설정 파일에서 가져옴)
    this.apiCallTracker = {
      dailyCalls: 0,
      monthlyCalls: 0,
      lastResetDate: new Date().toDateString(),
      dailyLimit: ODDS_API_CONFIG.RATE_LIMITS.DAILY,
      monthlyLimit: ODDS_API_CONFIG.RATE_LIMITS.MONTHLY,
      currentHourCalls: 0,
      hourlyLimit: ODDS_API_CONFIG.RATE_LIMITS.HOURLY
    };
    
    // 성능 모니터링
    this.performanceMetrics = {
      totalProcessingTime: 0,
      averageProcessingTime: 0,
      callCount: 0
    };
  }

  // API 호출량 추적 및 제한 확인
  trackApiCall() {
    const today = new Date().toDateString();
    const currentHour = new Date().getHours();
    
    // 날짜가 바뀌면 일일 카운터 리셋
    if (this.apiCallTracker.lastResetDate !== today) {
      this.apiCallTracker.dailyCalls = 0;
      this.apiCallTracker.lastResetDate = today;
      this.apiCallTracker.currentHourCalls = 0;
    }
    
    this.apiCallTracker.dailyCalls++;
    this.apiCallTracker.monthlyCalls++;
    this.apiCallTracker.currentHourCalls++;
    
    console.log(`API Call Tracker: Daily ${this.apiCallTracker.dailyCalls}/${this.apiCallTracker.dailyLimit}, Monthly ${this.apiCallTracker.monthlyCalls}/${this.apiCallTracker.monthlyLimit}`);
  }

  // API 호출 가능 여부 확인 (개선된 버전)
  canMakeApiCall() {
    const { dailyCalls, dailyLimit, monthlyCalls, monthlyLimit, currentHourCalls, hourlyLimit } = this.apiCallTracker;
    
    // 월간 한도 90% 도달 시 경고
    if (monthlyCalls >= monthlyLimit * 0.9) {
      console.warn(`월간 API 사용량 90% 초과: ${monthlyCalls}/${monthlyLimit}`);
    }
    
    // 일일 한도 80% 도달 시 경고
    if (dailyCalls >= dailyLimit * 0.8) {
      console.warn(`일일 API 사용량 80% 초과: ${dailyCalls}/${dailyLimit}`);
    }
    
    // 실제 제한 적용
    if (monthlyCalls >= monthlyLimit) {
      console.error('월간 API 한도 초과!');
      return false;
    }
    
    if (dailyCalls >= dailyLimit) {
      console.error('일일 API 한도 초과!');
      return false;
    }
    
    if (currentHourCalls >= hourlyLimit) {
      console.error('시간당 API 한도 초과!');
      return false;
    }
    
    return true;
  }

  // 구조화된 로깅
  logApiCall(category, status, details = {}) {
    const logData = {
      timestamp: new Date().toISOString(),
      category,
      status,
      apiCalls: this.apiCallTracker.dailyCalls,
      dailyLimit: this.apiCallTracker.dailyLimit,
      monthlyCalls: this.apiCallTracker.monthlyCalls,
      monthlyLimit: this.apiCallTracker.monthlyLimit,
      ...details
    };
    
    if (status === LOG_LEVELS.ERROR) {
      console.error('[API_ERROR]', JSON.stringify(logData));
    } else if (status === LOG_LEVELS.WARN) {
      console.warn('[API_WARN]', JSON.stringify(logData));
    } else {
      console.log('[API_SUCCESS]', JSON.stringify(logData));
    }
  }

  // 성능 모니터링
  updatePerformanceMetrics(processingTime) {
    this.performanceMetrics.totalProcessingTime += processingTime;
    this.performanceMetrics.callCount++;
    this.performanceMetrics.averageProcessingTime = 
      this.performanceMetrics.totalProcessingTime / this.performanceMetrics.callCount;
    
    // 성능 임계값 체크
    if (processingTime > ODDS_API_CONFIG.PERFORMANCE_THRESHOLDS.MAX_PROCESSING_TIME) {
      console.error(`성능 임계값 초과: ${processingTime}ms`);
    } else if (processingTime > ODDS_API_CONFIG.PERFORMANCE_THRESHOLDS.WARNING_PROCESSING_TIME) {
      console.warn(`성능 경고: ${processingTime}ms`);
    }
  }

  // 유틸리티: 대기 함수
  sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  // API 사용량에 따른 동적 우선순위 조절
  getDynamicPriorityLevel() {
    const { dailyCalls, dailyLimit, monthlyCalls, monthlyLimit } = this.apiCallTracker;
    
    const dailyUsageRate = dailyCalls / dailyLimit;
    const monthlyUsageRate = monthlyCalls / monthlyLimit;
    
    if (dailyUsageRate > 0.8 || monthlyUsageRate > 0.8) {
      this.logApiCall('system', LOG_LEVELS.WARN, { 
        message: 'High API usage detected, switching to high priority only',
        dailyUsageRate,
        monthlyUsageRate
      });
      return 'high';
    } else if (dailyUsageRate > 0.6 || monthlyUsageRate > 0.6) {
      this.logApiCall('system', LOG_LEVELS.INFO, { 
        message: 'Medium API usage detected, switching to medium priority',
        dailyUsageRate,
        monthlyUsageRate
      });
      return 'medium';
    } else {
      return 'low';
    }
  }

  // 🆕 공식 평균 배당률 계산 (모든 북메이커의 outcome별 평균)
  calculateAverageOdds(bookmakers) {
    if (!bookmakers || !Array.isArray(bookmakers) || bookmakers.length === 0) {
      return null;
    }

    const officialOdds = {};

    // 모든 북메이커의 markets를 순회
    for (const bookmaker of bookmakers) {
      if (!bookmaker.markets || !Array.isArray(bookmaker.markets)) continue;

      for (const market of bookmaker.markets) {
        const marketKey = market.key; // h2h, totals, spreads 등
        if (!market.outcomes || !Array.isArray(market.outcomes)) continue;

        // 각 market별로 outcome 그룹화
        if (!officialOdds[marketKey]) {
          officialOdds[marketKey] = {};
        }

        for (const outcome of market.outcomes) {
          const outcomeKey = outcome.name; // 팀명, Over, Under, Draw 등
          const point = outcome.point; // 핸디캡, 언더/오버 기준점
          
          // point가 있는 경우 outcomeKey에 포함 (예: "Over 2.5", "Under 2.5")
          const finalKey = point !== undefined ? `${outcomeKey} ${point}` : outcomeKey;

          if (!officialOdds[marketKey][finalKey]) {
            officialOdds[marketKey][finalKey] = {
              prices: [],
              averagePrice: 0,
              count: 0
            };
          }

          // 유효한 배당률만 수집
          if (outcome.price && typeof outcome.price === 'number' && outcome.price > 1.0) {
            officialOdds[marketKey][finalKey].prices.push(outcome.price);
            officialOdds[marketKey][finalKey].count++;
          }
        }
      }
    }

    // 각 outcome별 평균 배당률 계산
    for (const marketKey in officialOdds) {
      for (const outcomeKey in officialOdds[marketKey]) {
        const outcome = officialOdds[marketKey][outcomeKey];
        if (outcome.prices.length > 0) {
          outcome.averagePrice = outcome.prices.reduce((sum, price) => sum + price, 0) / outcome.prices.length;
          // 소수점 3자리까지 반올림
          outcome.averagePrice = Math.round(outcome.averagePrice * 1000) / 1000;
        }
        // prices 배열은 제거 (최종 결과만 유지)
        delete outcome.prices;
      }
    }

    return officialOdds;
  }

  // 스마트 캐싱: 경기 시작 시간에 따른 우선순위 결정
  filterGamesByPriority(games, priorityLevel = 'medium') {
    const now = new Date();
    const oneHour = 60 * 60 * 1000;
    const sixHours = 6 * oneHour;
    const twentyFourHours = 24 * oneHour;
    
    return games.filter(game => {
      const gameTime = new Date(game.commence_time);
      const timeDiff = gameTime.getTime() - now.getTime();
      
      switch (priorityLevel) {
        case 'high':
          // 1시간 이내 시작 또는 진행 중인 경기
          return timeDiff <= oneHour && timeDiff >= -oneHour;
        case 'medium':
          // 6시간 이내 시작 예정 경기
          return timeDiff > oneHour && timeDiff <= sixHours;
        case 'low':
          // 24시간 이내 시작 예정 경기
          return timeDiff > sixHours && timeDiff <= twentyFourHours;
        default:
          return true;
      }
    });
  }

  // 활성 카테고리만 업데이트 (비용 절약용) - 스마트 캐싱 적용
  async fetchAndCacheOddsForCategories(activeCategories, priorityLevel = 'medium') {
    let totalUpdatedCount = 0;
    let totalNewCount = 0;
    let totalSkippedCount = 0;
    let totalApiCalls = 0;
    
    try {
      this.logApiCall('system', LOG_LEVELS.INFO, { 
        message: '배당률 업데이트 시작',
        priorityLevel,
        activeCategoriesCount: activeCategories.length
      });
      
      // 활성 카테고리만 필터링
      const categoriesToUpdate = activeCategories.filter(category => 
        clientSportKeyMap.hasOwnProperty(category)
      );
      
      this.logApiCall('system', LOG_LEVELS.INFO, { 
        message: '필터링된 카테고리',
        categories: categoriesToUpdate
      });
      
      // 배치 처리로 메모리 최적화
      const batchSize = ODDS_API_CONFIG.BATCH_SIZE;
      
      for (let i = 0; i < categoriesToUpdate.length; i += batchSize) {
        const batch = categoriesToUpdate.slice(i, i + batchSize);
        
        // 배치별로 처리
        await Promise.allSettled(
          batch.map(category => this.processCategoryOdds(category, priorityLevel))
        );
        
        // 메모리 정리를 위한 짧은 대기
        if (i + batchSize < categoriesToUpdate.length) {
          await this.sleep(1000);
        }
      }

      // 기존 데이터 정리 (설정에서 가져옴)
      await this.cleanupOldData();
      
      this.logApiCall('system', LOG_LEVELS.INFO, { 
        message: '배당률 업데이트 완료',
        totalUpdatedCount,
        totalNewCount,
        totalSkippedCount,
        totalApiCalls
      });
      
      return {
        updatedCount: totalUpdatedCount + totalNewCount,
        newCount: totalNewCount,
        updatedExistingCount: totalUpdatedCount,
        skippedCount: totalSkippedCount,
        apiCalls: totalApiCalls,
        categories: categoriesToUpdate
      };
      
    } catch (error) {
      this.logApiCall('system', LOG_LEVELS.ERROR, { 
        message: '배당률 업데이트 실패',
        error: error.message
      });
      throw error;
    }
  }

  // 개별 카테고리 처리 (새로운 메서드)
  async processCategoryOdds(clientCategory, priorityLevel) {
    const startTime = Date.now();
    
    try {
      const sportKey = clientSportKeyMap[clientCategory];
      this.logApiCall(clientCategory, LOG_LEVELS.INFO, { 
        message: '카테고리 처리 시작',
        sportKey,
        priorityLevel
      });
      
      let categoryUpdatedCount = 0;
      let categoryNewCount = 0;
      let categorySkippedCount = 0;
      
      // API 호출 가능 여부 확인 (개선된 버전)
      if (!this.canMakeApiCall()) {
        this.logApiCall(clientCategory, LOG_LEVELS.WARN, { 
          message: 'API 제한으로 인한 스킵'
        });
        return;
      }

      // 최근 7일간의 경기 배당률 데이터 가져오기 (개선된 에러 처리)
      const oddsResponse = await this.fetchOddsWithRetry(sportKey, clientCategory);
      
      if (!oddsResponse) {
        return;
      }

      // 우선순위에 따라 게임 필터링
      const filteredGames = this.filterGamesByPriority(oddsResponse.data, priorityLevel);
      this.logApiCall(clientCategory, LOG_LEVELS.INFO, { 
        message: '게임 필터링 완료',
        totalGames: oddsResponse.data.length,
        filteredGames: filteredGames.length,
        priorityLevel
      });

      // 데이터 검증 및 저장
      for (const game of filteredGames) {
        if (this.validateOddsData(game)) {
          const result = await this.saveGameOdds(game, clientCategory, sportKey);
          if (result === 'new') {
            categoryNewCount++;
          } else if (result === 'updated') {
            categoryUpdatedCount++;
          } else {
            categorySkippedCount++;
          }
        } else {
          categorySkippedCount++;
        }
      }
      
      const processingTime = Date.now() - startTime;
      this.updatePerformanceMetrics(processingTime);
      
      this.logApiCall(clientCategory, LOG_LEVELS.INFO, { 
        message: '카테고리 처리 완료',
        newCount: categoryNewCount,
        updatedCount: categoryUpdatedCount,
        skippedCount: categorySkippedCount,
        processingTime
      });
      
    } catch (error) {
      const processingTime = Date.now() - startTime;
      this.logApiCall(clientCategory, LOG_LEVELS.ERROR, { 
        message: '카테고리 처리 실패',
        error: error.message,
        processingTime
      });
      throw error;
    }
  }

  // 재시도 로직이 포함된 API 호출
  async fetchOddsWithRetry(sportKey, clientCategory, retryCount = 0) {
    try {
      const oddsResponse = await axios.get(`${this.baseUrl}/${sportKey}/odds`, {
        params: {
          apiKey: this.apiKey,
          regions: 'us',
          markets: 'h2h,spreads,totals',
          oddsFormat: 'decimal',
          dateFormat: 'iso'
        },
        timeout: ODDS_API_CONFIG.TIMEOUT,
        headers: {
          'User-Agent': 'LikeBetFair/1.0'
        }
      });

      // API 호출 추적
      this.trackApiCall();
      
      return oddsResponse;
      
    } catch (error) {
      // 에러 유형별 처리
      if (error.response?.status === 429) {
        this.logApiCall(clientCategory, LOG_LEVELS.ERROR, { 
          message: 'API 요청 한도 초과',
          retryCount
        });
        
        if (retryCount < ODDS_API_CONFIG.ERROR_HANDLING.MAX_RETRIES) {
          await this.sleep(ODDS_API_CONFIG.ERROR_HANDLING.RATE_LIMIT_RETRY_DELAY);
          return this.fetchOddsWithRetry(sportKey, clientCategory, retryCount + 1);
        }
      } else if (error.response?.status === 401) {
        this.logApiCall(clientCategory, LOG_LEVELS.ERROR, { 
          message: 'API 키 인증 실패'
        });
        throw error; // 전체 프로세스 중단
      } else {
        this.logApiCall(clientCategory, LOG_LEVELS.ERROR, { 
          message: '배당률 조회 실패',
          error: error.message,
          retryCount
        });
        
        if (retryCount < ODDS_API_CONFIG.ERROR_HANDLING.MAX_RETRIES) {
          await this.sleep(ODDS_API_CONFIG.ERROR_HANDLING.RETRY_DELAY);
          return this.fetchOddsWithRetry(sportKey, clientCategory, retryCount + 1);
        }
      }
      
      return null;
    }
  }

          // API 호출 추적
          this.trackApiCall();
          totalApiCalls++;

          // 우선순위에 따라 게임 필터링
          const filteredGames = this.filterGamesByPriority(oddsResponse.data, priorityLevel);
          console.log(`Found ${oddsResponse.data.length} total games, ${filteredGames.length} games match priority ${priorityLevel} for ${clientCategory}`);

          // 데이터 검증 및 저장
          for (const game of filteredGames) {
            if (this.validateOddsData(game)) {
              const mainCategory = this.determineMainCategory(clientCategory);
              const subCategory = this.determineSubCategory(clientCategory);
              
              if (!mainCategory || !subCategory) {
                console.error(`[oddsApiService] mainCategory/subCategory 누락: mainCategory=${mainCategory}, subCategory=${subCategory}, data=`, { mainCategory, subCategory, sportKey, sportTitle: clientCategory, homeTeam: game.home_team, awayTeam: game.away_team, commenceTime: new Date(game.commence_time), bookmakers: game.bookmakers });
                categorySkippedCount++;
                totalSkippedCount++;
                continue;
              }
              
              // 기존 데이터 확인
              const existingOdds = await OddsCache.findOne({
                where: {
                  mainCategory,
                  subCategory,
                  homeTeam: game.home_team,
                  awayTeam: game.away_team,
                  commenceTime: new Date(game.commence_time)
                }
              });
              
              const oddsData = {
                mainCategory,
                subCategory,
                sportKey: sportKey,
                sportTitle: clientCategory,
                homeTeam: game.home_team,
                awayTeam: game.away_team,
                commenceTime: new Date(game.commence_time),
                bookmakers: game.bookmakers,
                officialOdds: this.calculateAverageOdds(game.bookmakers), // 🆕 공식 평균 배당률 추가
                lastUpdated: new Date()
              };
              
              if (existingOdds) {
                // 기존 데이터 업데이트
                const [updatedCount] = await OddsCache.update(oddsData, {
                  where: { id: existingOdds.id }
                });
                
                if (updatedCount > 0) {
                  categoryUpdatedCount++;
                  totalUpdatedCount++;
                  console.log(`Updated existing odds: ${game.home_team} vs ${game.away_team}`);
                  
                  // 업데이트된 배당률 히스토리 저장
                  try {
                    const updatedOdds = await OddsCache.findByPk(existingOdds.id);
                    if (updatedOdds) {
                      const historyCount = await oddsHistoryService.saveOddsSnapshot(updatedOdds);
                      if (historyCount > 0) {
                        console.log(`[OddsHistory] ${clientCategory} 업데이트 히스토리 ${historyCount}개 저장됨`);
                      }
                    }
                  } catch (historyError) {
                    console.error(`[OddsHistory] 히스토리 저장 실패 (${clientCategory}):`, historyError.message);
                    // 히스토리 저장 실패가 전체 프로세스를 중단시키지 않도록 계속 진행
                  }
                }
              } else {
                // 새 데이터 생성
                const newOdds = await OddsCache.create(oddsData);
                categoryNewCount++;
                totalNewCount++;
                console.log(`Created new odds: ${game.home_team} vs ${game.away_team}`);
                
                // 새 배당률 히스토리 저장
                try {
                  const historyCount = await oddsHistoryService.saveOddsSnapshot(newOdds);
                  if (historyCount > 0) {
                    console.log(`[OddsHistory] ${clientCategory} 새 히스토리 ${historyCount}개 저장됨`);
                  }
                } catch (historyError) {
                  console.error(`[OddsHistory] 히스토리 저장 실패 (${clientCategory}):`, historyError.message);
                  // 히스토리 저장 실패가 전체 프로세스를 중단시키지 않도록 계속 진행
                }
              }
            } else {
              categorySkippedCount++;
              totalSkippedCount++;
            }
          }
          
          console.log(`${clientCategory} odds update summary: ${categoryNewCount} new, ${categoryUpdatedCount} updated, ${categorySkippedCount} skipped`);
          
        } catch (error) {
          console.error(`Error fetching odds for ${clientCategory}:`, error.message);
          // 개별 스포츠 에러가 전체 프로세스를 중단시키지 않도록 계속 진행
          continue;
        }
      }

      // 기존 데이터 정리 (7일 이상 된 데이터 삭제)
      await this.cleanupOldData();
      
      console.log(`Odds update completed for active categories. Total: ${totalNewCount} new, ${totalUpdatedCount} updated, ${totalSkippedCount} skipped, ${totalApiCalls} API calls`);
      
      return {
        updatedCount: totalUpdatedCount + totalNewCount,
        newCount: totalNewCount,
        updatedExistingCount: totalUpdatedCount,
        skippedCount: totalSkippedCount,
        apiCalls: totalApiCalls,
        categories: categoriesToUpdate
      };
      
    } catch (error) {
      console.error('Error fetching and caching odds for active categories:', error);
      throw error;
    }
  }

  // 전체 카테고리 업데이트 (기존 메서드)
  async fetchAndCacheOdds() {
    try {
      console.log('Starting odds update for all categories...');
      
      // 클라이언트에서 사용하는 모든 카테고리에 대해 개별적으로 API 호출
      for (const [clientCategory, sportKey] of Object.entries(clientSportKeyMap)) {
        console.log(`Fetching odds for ${clientCategory} (${sportKey})...`);
        
        try {
          // 최근 7일간의 경기 배당률 데이터 가져오기 (타임아웃 및 재시도 로직 추가)
          const oddsResponse = await axios.get(`${this.baseUrl}/${sportKey}/odds`, {
            params: {
              apiKey: this.apiKey,
              regions: 'us',
              markets: 'h2h,spreads,totals',
              oddsFormat: 'decimal',
              dateFormat: 'iso'
            },
            timeout: 30000, // 30초 타임아웃 (Render 서버용)
            headers: {
              'User-Agent': 'LikeBetFair/1.0'
            }
          });

          console.log(`Found ${oddsResponse.data.length} games with odds for ${clientCategory}`);

          // 데이터 검증 및 저장
          for (const game of oddsResponse.data) {
            if (this.validateOddsData(game)) {
              const mainCategory = this.determineMainCategory(clientCategory);
              const subCategory = this.determineSubCategory(clientCategory);
              
              if (!mainCategory || !subCategory) {
                console.error(`[oddsApiService] mainCategory/subCategory 누락: mainCategory=${mainCategory}, subCategory=${subCategory}, data=`, { mainCategory, subCategory, sportKey, sportTitle: clientCategory, homeTeam: game.home_team, awayTeam: game.away_team, commenceTime: new Date(game.commence_time), bookmakers: game.bookmakers });
                continue;
              }
              
              const [oddsRecord, created] = await OddsCache.upsert({
                mainCategory,
                subCategory,
                sportKey: sportKey,
                sportTitle: clientCategory,
                homeTeam: game.home_team,
                awayTeam: game.away_team,
                commenceTime: new Date(game.commence_time),
                bookmakers: game.bookmakers,
                officialOdds: this.calculateAverageOdds(game.bookmakers), // 🆕 공식 평균 배당률 추가
                lastUpdated: new Date()
              }, {
                returning: true
              });

              // 배당율 히스토리 저장 (새로 생성되거나 업데이트된 경우)
              if (oddsRecord) {
                try {
                  const historyCount = await oddsHistoryService.saveOddsSnapshot(oddsRecord);
                  if (historyCount > 0) {
                    console.log(`[OddsHistory] ${clientCategory} 히스토리 ${historyCount}개 저장됨`);
                  }
                } catch (historyError) {
                  console.error(`[OddsHistory] 히스토리 저장 실패 (${clientCategory}):`, historyError.message);
                  // 히스토리 저장 실패가 전체 프로세스를 중단시키지 않도록 계속 진행
                }
              }
            }
          }
        } catch (error) {
          console.error(`Error fetching odds for ${clientCategory}:`, error.message);
          // 개별 스포츠 에러가 전체 프로세스를 중단시키지 않도록 계속 진행
          continue;
        }
      }

      // 기존 데이터 정리 (7일 이상 된 데이터 삭제)
      await this.cleanupOldData();
      
      console.log('Odds successfully updated for all categories');
    } catch (error) {
      console.error('Error fetching and caching odds:', error);
      throw error;
    }
  }

  // sportKey에서 mainCategory/subCategory 직접 추출 (fallback)
  parseMainAndSubFromSportKey(sportKey) {
    if (!sportKey) return { mainCategory: '', subCategory: '' };
    const parts = sportKey.split('_');
    const main = parts[0] || '';
    const sub = parts.slice(1).join('_') || '';
    // normalizeCategoryPair는 mainCategory: 소문자, subCategory: 대문자 반환
    return normalizeCategoryPair(main, sub);
  }

  // 기존 메서드 보완: sportKey 자체도 허용
  getClientCategoryFromSportKey(sportKey) {
    const reverseMap = {};
    for (const [clientCategory, key] of Object.entries(clientSportKeyMap)) {
      reverseMap[key] = clientCategory;
    }
    // fallback: sportKey 자체 반환
    return reverseMap[sportKey] || sportKey;
  }

  // 기존 메서드 보완: clientCategory 또는 sportKey 모두 허용
  determineMainCategory(clientCategoryOrSportKey) {
    if (clientSportKeyMap[clientCategoryOrSportKey]) {
      // clientCategory일 때 기존 방식
      const sportKey = clientSportKeyMap[clientCategoryOrSportKey];
      const parts = sportKey.split('_');
      const main = parts[0] || '';
      const sub = parts.slice(1).join('_') || '';
      return normalizeCategoryPair(main, sub).mainCategory;
    } else {
      // sportKey일 때 fallback
      return this.parseMainAndSubFromSportKey(clientCategoryOrSportKey).mainCategory;
    }
  }

  determineSubCategory(clientCategoryOrSportKey) {
    if (clientSportKeyMap[clientCategoryOrSportKey]) {
      const sportKey = clientSportKeyMap[clientCategoryOrSportKey];
      const parts = sportKey.split('_');
      const main = parts[0] || '';
      const sub = parts.slice(1).join('_') || '';
      return normalizeCategoryPair(main, sub).subCategory;
    } else {
      return this.parseMainAndSubFromSportKey(clientCategoryOrSportKey).subCategory;
    }
  }

  validateOddsData(game) {
    // 기존 검증 + 추가 검증
    if (!game.home_team || !game.away_team || !game.commence_time) {
      this.logApiCall('validation', LOG_LEVELS.ERROR, { 
        message: '필수 필드 누락',
        game: { home_team: game.home_team, away_team: game.away_team, commence_time: game.commence_time }
      });
      return false;
    }

    // 팀명이 같은 경기 제외 (비현실적)
    if (game.home_team === game.away_team) {
      this.logApiCall('validation', LOG_LEVELS.ERROR, { 
        message: '같은 팀끼리 경기',
        game: `${game.home_team} vs ${game.away_team}`
      });
      return false;
    }

    // 경기 시간이 미래로 너무 먼 경우 제외 (1년 이상)
    const gameTime = new Date(game.commence_time);
    const oneYearFromNow = new Date();
    oneYearFromNow.setFullYear(oneYearFromNow.getFullYear() + 1);
    
    if (gameTime > oneYearFromNow) {
      this.logApiCall('validation', LOG_LEVELS.ERROR, { 
        message: '너무 먼 미래 경기',
        gameTime: game.commence_time
      });
      return false;
    }

    // 배당률 데이터 검증
    if (!game.bookmakers || !Array.isArray(game.bookmakers) || game.bookmakers.length === 0) {
      this.logApiCall('validation', LOG_LEVELS.ERROR, { 
        message: '북메이커 데이터 없음',
        game: `${game.home_team} vs ${game.away_team}`
      });
      return false;
    }

    // 각 북메이커의 배당률 검증
    for (const bookmaker of game.bookmakers) {
      if (!bookmaker.markets || !Array.isArray(bookmaker.markets)) {
        this.logApiCall('validation', LOG_LEVELS.ERROR, { 
          message: '마켓 데이터 누락',
          bookmaker: bookmaker.title || 'unknown'
        });
        return false;
      }
      
      for (const market of bookmaker.markets) {
        if (!market.outcomes || !Array.isArray(market.outcomes)) {
          this.logApiCall('validation', LOG_LEVELS.ERROR, { 
            message: '결과 데이터 누락',
            market: market.key || 'unknown'
          });
          return false;
        }
        
        // 배당률 값 검증
        for (const outcome of market.outcomes) {
          if (!outcome.price || typeof outcome.price !== 'number' || outcome.price <= 1.0) {
            this.logApiCall('validation', LOG_LEVELS.ERROR, { 
              message: '잘못된 배당률',
              outcome: outcome.name,
              price: outcome.price
            });
            return false;
          }
        }
      }
    }

    return true;
  }

  async cleanupOldData() {
    try {
      // 7일 이상 된 데이터 삭제
      const sevenDaysAgo = new Date();
      sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);
      
      const deletedCount = await OddsCache.destroy({
        where: {
          commenceTime: {
            [Op.lt]: sevenDaysAgo
          }
        }
      });
      
      if (deletedCount > 0) {
        console.log(`Cleaned up ${deletedCount} old odds records`);
      }
    } catch (error) {
      console.error('Error cleaning up old odds data:', error);
    }
  }

  async getOdds(mainCategory = null, subCategory = null, limit = 100) {
    try {
      const whereClause = {};
      if (mainCategory) whereClause.mainCategory = mainCategory;
      if (subCategory) whereClause.subCategory = subCategory;

      const odds = await OddsCache.findAll({
        where: whereClause,
        order: [['commenceTime', 'ASC']],
        limit
      });
      return odds;
    } catch (error) {
      console.error('Error fetching odds:', error);
      throw error;
    }
  }

  async getOddsById(oddsId) {
    try {
      const odds = await OddsCache.findByPk(oddsId);
      return odds;
    } catch (error) {
      console.error('Error fetching odds:', error);
      throw error;
    }
  }

  async updateOdds(oddsId, updateData) {
    try {
      const odds = await OddsCache.findByPk(oddsId);
      if (!odds) {
        throw new Error('Odds not found');
      }

      await odds.update({
        ...updateData,
        lastUpdated: new Date()
      });

      return odds;
    } catch (error) {
      console.error('Error updating odds:', error);
      throw error;
    }
  }

  // 새로운 메서드: 특정 스포츠의 최근 배당률만 가져오기
  async fetchRecentOdds(clientCategory) {
    try {
      const sportKey = clientSportKeyMap[clientCategory];
      if (!sportKey) {
        throw new Error(`Unknown category: ${clientCategory}`);
      }

      const oddsResponse = await axios.get(`${this.baseUrl}/${sportKey}/odds`, {
        params: {
          apiKey: this.apiKey,
          regions: 'us',
          markets: 'h2h,spreads,totals',
          oddsFormat: 'decimal',
          dateFormat: 'iso'
        }
      });

      return oddsResponse.data;
    } catch (error) {
      console.error(`Error fetching recent odds for ${clientCategory}:`, error);
      throw error;
    }
  }

  // 새로운 메서드: 배당률 데이터베이스 통계
  async getOddsStats() {
    try {
      const stats = await OddsCache.findAll({
        attributes: [
          'mainCategory',
          'subCategory',
          [require('sequelize').fn('COUNT', require('sequelize').col('id')), 'count']
        ],
        group: ['mainCategory', 'subCategory'],
        raw: true
      });

      return stats;
    } catch (error) {
      console.error('Error getting odds stats:', error);
      throw error;
    }
  }

  // 새로운 메서드: API 호출 비용 추정
  async getApiCostEstimate() {
    try {
      const stats = await this.getOddsStats();
      const totalGames = stats.reduce((sum, stat) => sum + parseInt(stat.count), 0);
      
      // 새로운 우선순위 기반 계산 (목표: 18,000회/월)
      // 리그별 분포: 고우선순위 4개, 중우선순위 4개, 저우선순위 5개
      const highPriorityLeagues = 4;
      const mediumPriorityLeagues = 4; 
      const lowPriorityLeagues = 5;
      
      // 각 리그당 평균 경기 수 (571 / 13 = 약 44경기)
      const avgGamesPerLeague = Math.round(totalGames / 13);
      
      const dailyApiCalls = Math.round(
        (highPriorityLeagues * 8) + // 고우선순위: 3시간마다 = 8회/일
        (mediumPriorityLeagues * 4) + // 중우선순위: 6시간마다 = 4회/일  
        (lowPriorityLeagues * 2) // 저우선순위: 12시간마다 = 2회/일
      );
      
      const monthlyApiCalls = dailyApiCalls * 30;
      
      return {
        totalGames,
        leagueDistribution: {
          highPriority: `${highPriorityLeagues} leagues (NBA, MLB, KBO, NFL)`,
          mediumPriority: `${mediumPriorityLeagues} leagues (MLS, K리그, J리그, 세리에A)`,
          lowPriority: `${lowPriorityLeagues} leagues (시즌 오프 리그들)`
        },
        estimatedApiCalls: {
          daily: dailyApiCalls,
          monthly: monthlyApiCalls,
          costEstimate: `$${(monthlyApiCalls * 0.001).toFixed(2)}/month`,
          targetAchieved: monthlyApiCalls <= 18000 ? '✅ 목표 달성' : '❌ 목표 초과'
        },
        limits: {
          dailyLimit: this.apiCallTracker.dailyLimit,
          monthlyLimit: this.apiCallTracker.monthlyLimit,
          currentUsage: {
            daily: this.apiCallTracker.dailyCalls,
            monthly: this.apiCallTracker.monthlyCalls
          }
        },
        optimization: {
          priorityBasedUpdates: 'Reduces calls by ~65%',
          smartCaching: 'Reduces calls by ~25%',
          dynamicThrottling: 'Prevents overuse automatically',
          totalSavings: `From 25,695 to ${monthlyApiCalls} calls (${Math.round((1 - monthlyApiCalls/25695) * 100)}% reduction)`
        }
      };
    } catch (error) {
      console.error('Error getting API cost estimate:', error);
      throw error;
    }
  }

  // 누락된 메서드: 카테고리 목록 가져오기
  async getCategories() {
    try {
      const categories = [];
      
      // 클라이언트에서 사용하는 모든 카테고리 반환
      for (const [clientCategory, sportKey] of Object.entries(clientSportKeyMap)) {
        const mainCategory = this.determineMainCategory(clientCategory);
        const subCategory = this.determineSubCategory(clientCategory);
        
        categories.push({
          clientCategory,
          sportKey,
          mainCategory,
          subCategory,
          displayName: clientCategory
        });
      }
      
      return categories;
    } catch (error) {
      console.error('Error getting categories:', error);
      throw error;
    }
  }

  // 누락된 메서드: 캐시된 배당률 데이터 가져오기
  async getCachedOdds(sportKey, subCategory = null, limit = 100) {
    try {
      console.log(`Fetching cached odds for sportKey: ${sportKey}, subCategory: ${subCategory}, limit: ${limit}`);
      
      // sportKey를 클라이언트 카테고리로 변환
      const clientCategory = this.getClientCategoryFromSportKey(sportKey);
      if (!clientCategory) {
        console.log(`Unknown sportKey: ${sportKey}`);
        return [];
      }
      
      const mainCategory = this.determineMainCategory(clientCategory);
      const actualSubCategory = subCategory || this.determineSubCategory(clientCategory);
      
      console.log(`Mapped to mainCategory: ${mainCategory}, subCategory: ${actualSubCategory}`);
      
      const whereClause = {
        mainCategory: mainCategory,
        subCategory: actualSubCategory
      };
      
      const odds = await OddsCache.findAll({
        where: whereClause,
        order: [['commenceTime', 'ASC']],
        limit: limit
      });
      console.log('[getCachedOdds] 쿼리 결과:', odds.length, odds.map(o => ({id: o.id, mainCategory: o.mainCategory, subCategory: o.subCategory, homeTeam: o.homeTeam, awayTeam: o.awayTeam, commenceTime: o.commenceTime})));
      
      // 클라이언트에서 기대하는 형식으로 변환
      const formattedOdds = odds.map(oddsRecord => ({
        id: oddsRecord.id,
        sport: sportKey,
        home_team: oddsRecord.homeTeam,
        away_team: oddsRecord.awayTeam,
        commence_time: oddsRecord.commenceTime,
        bookmakers: oddsRecord.bookmakers, // 북메이커 정보 포함
        officialOdds: oddsRecord.officialOdds, // 공식 평균 배당률
        lastUpdated: oddsRecord.lastUpdated
      }));
      
      return formattedOdds;
    } catch (error) {
      console.error('Error fetching cached odds:', error);
      throw error;
    }
  }

  // OddsCache 저장/업데이트 시 정규화 적용 예시 (insert, upsert, update 등 모든 저장 지점에 적용 필요)
  async upsertOddsCache(data) {
    // data: { mainCategory, subCategory, ... }
    const { mainCategory, subCategory } = normalizeCategoryPair(data.mainCategory, data.subCategory);
    const saveData = { ...data, mainCategory, subCategory };
    if (!mainCategory || !subCategory) {
      console.error(`[oddsApiService] mainCategory/subCategory 누락: mainCategory=${mainCategory}, subCategory=${subCategory}, data=`, data);
      return; // 저장 skip
    }
    return OddsCache.upsert(saveData);
  }

  // OddsCache 테이블의 총 레코드 수 반환
  async getOddsCount() {
    try {
      const count = await OddsCache.count();
      return count;
    } catch (error) {
      console.error('[OddsApiService] getOddsCount 오류:', error);
      throw error;
    }
  }
}

const oddsApiService = new OddsApiService();
export default oddsApiService; 