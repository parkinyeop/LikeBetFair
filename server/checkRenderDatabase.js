import { Sequelize } from 'sequelize';
import config from './config/database.js';

// Render ÏÑúÎ≤Ñ ÌôòÍ≤ΩÏóêÏÑú Ïã§Ìñâ
const env = process.env.NODE_ENV || 'production';
const dbConfig = config[env];

console.log('üîç Render ÏÑúÎ≤Ñ Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞ Ï†ïÎ≥¥:');
console.log(`- Host: ${dbConfig.host}`);
console.log(`- Database: ${dbConfig.database}`);
console.log(`- User: ${dbConfig.username}`);
console.log(`- Environment: ${env}`);

const sequelize = new Sequelize(dbConfig.database, dbConfig.username, dbConfig.password, {
  host: dbConfig.host,
  port: dbConfig.port,
  dialect: dbConfig.dialect,
  logging: false
});

async function checkRenderDatabase() {
  try {
    await sequelize.authenticate();
    console.log('‚úÖ Render Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞ ÏÑ±Í≥µ');
    
    // 1. Ï†ïÌôïÌïú IDÎ°ú Í≤ÄÏÉâ
    console.log('\n1Ô∏è‚É£ Ï†ïÌôïÌïú ID Í≤ÄÏÉâ: a83d4b9e-c949-4cba-a4f9-136676c02c86');
    const [exactIdResult] = await sequelize.query(`
      SELECT * FROM "OddsCaches" 
      WHERE id = 'a83d4b9e-c949-4cba-a4f9-136676c02c86'
    `);
    
    if (exactIdResult.length > 0) {
      const game = exactIdResult[0];
      console.log(`‚úÖ Ï∞æÏùå: ${game.homeTeam} vs ${game.awayTeam} - ${game.commenceTime}`);
      console.log(`   sportKey: ${game.sportKey}, mainCategory: ${game.mainCategory}, subCategory: ${game.subCategory}`);
    } else {
      console.log('‚ùå Ìï¥Îãπ IDÏùò Í≤ΩÍ∏∞Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.');
    }
    
    // 2. ÌåÄÎ™ÖÏúºÎ°ú Í≤ÄÏÉâ
    console.log('\n2Ô∏è‚É£ ÌåÄÎ™Ö Í≤ÄÏÉâ: Oakland Athletics vs Seattle Mariners');
    const [teamResult] = await sequelize.query(`
      SELECT * FROM "OddsCaches" 
      WHERE ("homeTeam" ILIKE '%Oakland Athletics%' AND "awayTeam" ILIKE '%Seattle Mariners%')
         OR ("homeTeam" ILIKE '%Seattle Mariners%' AND "awayTeam" ILIKE '%Oakland Athletics%')
      ORDER BY "commenceTime" DESC
    `);
    
    console.log(`ÌåÄÎ™Ö Í≤ÄÏÉâ Í≤∞Í≥º: ${teamResult.length}Í∞ú`);
    teamResult.forEach((game, i) => {
      console.log(`${i+1}. ${game.homeTeam} vs ${game.awayTeam} - ${game.commenceTime} (ID: ${game.id})`);
    });
    
    // 3. 2025-07-29 ÎÇ†ÏßúÎ°ú Í≤ÄÏÉâ
    console.log('\n3Ô∏è‚É£ 2025-07-29 ÎÇ†Ïßú Í≤ÄÏÉâ');
    const [dateResult] = await sequelize.query(`
      SELECT * FROM "OddsCaches" 
      WHERE "commenceTime"::date = '2025-07-29'
      ORDER BY "commenceTime" ASC
    `);
    
    console.log(`2025-07-29 ÎÇ†Ïßú Í≤ÄÏÉâ Í≤∞Í≥º: ${dateResult.length}Í∞ú`);
    dateResult.forEach((game, i) => {
      console.log(`${i+1}. ${game.homeTeam} vs ${game.awayTeam} - ${game.commenceTime} (ID: ${game.id})`);
    });
    
    // 4. MLB Í≤ΩÍ∏∞ Ï§ë 2025-07-29 Í∑ºÏ≤ò Í≤ÄÏÉâ
    console.log('\n4Ô∏è‚É£ MLB 2025-07-28~30 Í≤ÄÏÉâ');
    const [mlbResult] = await sequelize.query(`
      SELECT * FROM "OddsCaches" 
      WHERE "subCategory" = 'MLB' 
         AND "commenceTime" >= '2025-07-28' 
         AND "commenceTime" <= '2025-07-30'
      ORDER BY "commenceTime" ASC
    `);
    
    console.log(`MLB 2025-07-28~30 Í≤ÄÏÉâ Í≤∞Í≥º: ${mlbResult.length}Í∞ú`);
    mlbResult.forEach((game, i) => {
      console.log(`${i+1}. ${game.homeTeam} vs ${game.awayTeam} - ${game.commenceTime} (ID: ${game.id})`);
    });
    
    // 5. Ï†ÑÏ≤¥ MLB Í≤ΩÍ∏∞ Ïàò ÌôïÏù∏
    console.log('\n5Ô∏è‚É£ Ï†ÑÏ≤¥ MLB Í≤ΩÍ∏∞ Ïàò');
    const [mlbCountResult] = await sequelize.query(`
      SELECT COUNT(*) as count FROM "OddsCaches" 
      WHERE "subCategory" = 'MLB'
    `);
    
    console.log(`Ï†ÑÏ≤¥ MLB Í≤ΩÍ∏∞ Ïàò: ${mlbCountResult[0].count}Í∞ú`);
    
    // 6. ÏµúÍ∑º MLB Í≤ΩÍ∏∞ 5Í∞ú
    console.log('\n6Ô∏è‚É£ ÏµúÍ∑º MLB Í≤ΩÍ∏∞ 5Í∞ú');
    const [recentMlbResult] = await sequelize.query(`
      SELECT * FROM "OddsCaches" 
      WHERE "subCategory" = 'MLB'
      ORDER BY "commenceTime" DESC
      LIMIT 5
    `);
    
    recentMlbResult.forEach((game, i) => {
      console.log(`${i+1}. ${game.homeTeam} vs ${game.awayTeam} - ${game.commenceTime} (ID: ${game.id})`);
    });
    
  } catch (error) {
    console.error('‚ùå Ïò§Î•ò:', error);
  } finally {
    await sequelize.close();
  }
}

checkRenderDatabase(); 