'use strict';

module.exports = {
  up: async (queryInterface, Sequelize) => {
    const transaction = await queryInterface.sequelize.transaction();
    
    try {
      console.log('üîÑ Fixing foreign key constraints...');
      
      // 1. AdminCommissions ÌÖåÏù¥Î∏îÏùò Ïô∏ÎûòÌÇ§ Ï†úÏïΩÏ°∞Í±¥ Ï†úÍ±∞
      try {
        await queryInterface.removeConstraint('AdminCommissions', 'AdminCommissions_betId_fkey', { transaction });
        console.log('‚úÖ Removed AdminCommissions_betId_fkey constraint');
      } catch (error) {
        console.log('‚ö†Ô∏è AdminCommissions_betId_fkey constraint might not exist:', error.message);
      }
      
      // 2. Bets ÌÖåÏù¥Î∏î ÏÇ≠Ï†ú
      await queryInterface.dropTable('Bets', { transaction });
      console.log('‚úÖ Dropped Bets table');
      
      // 3. ÏÉàÎ°úÏö¥ Bets ÌÖåÏù¥Î∏î ÏÉùÏÑ± (UUID id)
      await queryInterface.createTable('Bets', {
        id: {
          type: Sequelize.UUID,
          defaultValue: Sequelize.UUIDV4,
          primaryKey: true
        },
        userId: {
          type: Sequelize.UUID,
          allowNull: false,
          references: {
            model: 'Users',
            key: 'id'
          }
        },
        selection: {
          type: Sequelize.JSONB,
          allowNull: false
        },
        stake: {
          type: Sequelize.INTEGER,
          allowNull: false
        },
        odds: {
          type: Sequelize.DECIMAL(10, 2),
          allowNull: false
        },
        potentialWinnings: {
          type: Sequelize.INTEGER,
          allowNull: false
        },
        status: {
          type: Sequelize.ENUM('pending', 'won', 'lost', 'cancelled'),
          allowNull: false,
          defaultValue: 'pending'
        },
        createdAt: {
          type: Sequelize.DATE,
          allowNull: false,
          defaultValue: Sequelize.NOW
        },
        updatedAt: {
          type: Sequelize.DATE,
          allowNull: false,
          defaultValue: Sequelize.NOW
        }
      }, { transaction });
      
      console.log('‚úÖ Created new Bets table with UUID id');
      
      // 4. AdminCommissions ÌÖåÏù¥Î∏îÏùò betId Ïª¨Îüº ÌÉÄÏûÖÏùÑ UUIDÎ°ú Î≥ÄÍ≤Ω
      try {
        await queryInterface.changeColumn('AdminCommissions', 'betId', {
          type: Sequelize.UUID,
          allowNull: false
        }, { transaction });
        console.log('‚úÖ Changed AdminCommissions.betId to UUID type');
      } catch (error) {
        console.log('‚ö†Ô∏è Could not change AdminCommissions.betId:', error.message);
      }
      
      // 5. AdminCommissions ÌÖåÏù¥Î∏îÏóê Ïô∏ÎûòÌÇ§ Ï†úÏïΩÏ°∞Í±¥ Îã§Ïãú Ï∂îÍ∞Ä
      try {
        await queryInterface.addConstraint('AdminCommissions', {
          fields: ['betId'],
          type: 'foreign key',
          name: 'AdminCommissions_betId_fkey',
          references: {
            table: 'Bets',
            field: 'id'
          },
          onDelete: 'CASCADE',
          onUpdate: 'CASCADE'
        }, { transaction });
        console.log('‚úÖ Added AdminCommissions_betId_fkey constraint');
      } catch (error) {
        console.log('‚ö†Ô∏è Could not add AdminCommissions_betId_fkey constraint:', error.message);
      }
      
      await transaction.commit();
      console.log('üéâ Foreign key constraints fixed successfully');
      
    } catch (error) {
      await transaction.rollback();
      console.error('‚ùå Error fixing foreign key constraints:', error);
      throw error;
    }
  },

  down: async (queryInterface, Sequelize) => {
    const transaction = await queryInterface.sequelize.transaction();
    
    try {
      // Î°§Î∞±: Bets ÌÖåÏù¥Î∏îÏùÑ Îã§Ïãú INTEGER idÎ°ú ÏÉùÏÑ±
      await queryInterface.dropTable('Bets', { transaction });
      
      await queryInterface.createTable('Bets', {
        id: {
          type: Sequelize.INTEGER,
          primaryKey: true,
          autoIncrement: true
        },
        userId: {
          type: Sequelize.UUID,
          allowNull: false,
          references: {
            model: 'Users',
            key: 'id'
          }
        },
        selection: {
          type: Sequelize.JSONB,
          allowNull: false
        },
        stake: {
          type: Sequelize.INTEGER,
          allowNull: false
        },
        odds: {
          type: Sequelize.DECIMAL(10, 2),
          allowNull: false
        },
        potentialWinnings: {
          type: Sequelize.INTEGER,
          allowNull: false
        },
        status: {
          type: Sequelize.ENUM('pending', 'won', 'lost', 'cancelled'),
          allowNull: false,
          defaultValue: 'pending'
        },
        createdAt: {
          type: Sequelize.DATE,
          allowNull: false,
          defaultValue: Sequelize.NOW
        },
        updatedAt: {
          type: Sequelize.DATE,
          allowNull: false,
          defaultValue: Sequelize.NOW
        }
      }, { transaction });
      
      await transaction.commit();
      
    } catch (error) {
      await transaction.rollback();
      throw error;
    }
  }
}; 